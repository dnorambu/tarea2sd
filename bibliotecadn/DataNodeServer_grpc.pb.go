// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bibliotecadn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	UploadBookCentralizado(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadBookCentralizadoClient, error)
	UploadBookDistribuido(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadBookDistribuidoClient, error)
	DistributeBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DistributeBookClient, error)
	DownloadBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DownloadBookClient, error)
	SendPropuestaDistribuida(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Okrespondido, error)
	RequestCompetencia(ctx context.Context, in *Ricart, opts ...grpc.CallOption) (*Okrespondido, error)
	ListaVacia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Okrespondido, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) UploadBookCentralizado(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadBookCentralizadoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeService_serviceDesc.Streams[0], "/DataNodeService/UploadBookCentralizado", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceUploadBookCentralizadoClient{stream}
	return x, nil
}

type DataNodeService_UploadBookCentralizadoClient interface {
	Send(*UploadBookRequest) error
	CloseAndRecv() (*UploadBookResponse, error)
	grpc.ClientStream
}

type dataNodeServiceUploadBookCentralizadoClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceUploadBookCentralizadoClient) Send(m *UploadBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceUploadBookCentralizadoClient) CloseAndRecv() (*UploadBookResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) UploadBookDistribuido(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadBookDistribuidoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeService_serviceDesc.Streams[1], "/DataNodeService/UploadBookDistribuido", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceUploadBookDistribuidoClient{stream}
	return x, nil
}

type DataNodeService_UploadBookDistribuidoClient interface {
	Send(*UploadBookRequest) error
	CloseAndRecv() (*UploadBookResponse, error)
	grpc.ClientStream
}

type dataNodeServiceUploadBookDistribuidoClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceUploadBookDistribuidoClient) Send(m *UploadBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceUploadBookDistribuidoClient) CloseAndRecv() (*UploadBookResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DistributeBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DistributeBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeService_serviceDesc.Streams[2], "/DataNodeService/DistributeBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDistributeBookClient{stream}
	return x, nil
}

type DataNodeService_DistributeBookClient interface {
	Send(*UploadBookRequest) error
	CloseAndRecv() (*UploadBookResponse, error)
	grpc.ClientStream
}

type dataNodeServiceDistributeBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDistributeBookClient) Send(m *UploadBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceDistributeBookClient) CloseAndRecv() (*UploadBookResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DownloadBook(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_DownloadBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataNodeService_serviceDesc.Streams[3], "/DataNodeService/DownloadBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceDownloadBookClient{stream}
	return x, nil
}

type DataNodeService_DownloadBookClient interface {
	Send(*PartName) error
	Recv() (*PartChunk, error)
	grpc.ClientStream
}

type dataNodeServiceDownloadBookClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceDownloadBookClient) Send(m *PartName) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceDownloadBookClient) Recv() (*PartChunk, error) {
	m := new(PartChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) SendPropuestaDistribuida(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Okrespondido, error) {
	out := new(Okrespondido)
	err := c.cc.Invoke(ctx, "/DataNodeService/SendPropuestaDistribuida", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) RequestCompetencia(ctx context.Context, in *Ricart, opts ...grpc.CallOption) (*Okrespondido, error) {
	out := new(Okrespondido)
	err := c.cc.Invoke(ctx, "/DataNodeService/RequestCompetencia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) ListaVacia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Okrespondido, error) {
	out := new(Okrespondido)
	err := c.cc.Invoke(ctx, "/DataNodeService/ListaVacia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	UploadBookCentralizado(DataNodeService_UploadBookCentralizadoServer) error
	UploadBookDistribuido(DataNodeService_UploadBookDistribuidoServer) error
	DistributeBook(DataNodeService_DistributeBookServer) error
	DownloadBook(DataNodeService_DownloadBookServer) error
	SendPropuestaDistribuida(context.Context, *Propuesta) (*Okrespondido, error)
	RequestCompetencia(context.Context, *Ricart) (*Okrespondido, error)
	ListaVacia(context.Context, *Empty) (*Okrespondido, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) UploadBookCentralizado(DataNodeService_UploadBookCentralizadoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBookCentralizado not implemented")
}
func (UnimplementedDataNodeServiceServer) UploadBookDistribuido(DataNodeService_UploadBookDistribuidoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBookDistribuido not implemented")
}
func (UnimplementedDataNodeServiceServer) DistributeBook(DataNodeService_DistributeBookServer) error {
	return status.Errorf(codes.Unimplemented, "method DistributeBook not implemented")
}
func (UnimplementedDataNodeServiceServer) DownloadBook(DataNodeService_DownloadBookServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBook not implemented")
}
func (UnimplementedDataNodeServiceServer) SendPropuestaDistribuida(context.Context, *Propuesta) (*Okrespondido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPropuestaDistribuida not implemented")
}
func (UnimplementedDataNodeServiceServer) RequestCompetencia(context.Context, *Ricart) (*Okrespondido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCompetencia not implemented")
}
func (UnimplementedDataNodeServiceServer) ListaVacia(context.Context, *Empty) (*Okrespondido, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListaVacia not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s *grpc.Server, srv DataNodeServiceServer) {
	s.RegisterService(&_DataNodeService_serviceDesc, srv)
}

func _DataNodeService_UploadBookCentralizado_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).UploadBookCentralizado(&dataNodeServiceUploadBookCentralizadoServer{stream})
}

type DataNodeService_UploadBookCentralizadoServer interface {
	SendAndClose(*UploadBookResponse) error
	Recv() (*UploadBookRequest, error)
	grpc.ServerStream
}

type dataNodeServiceUploadBookCentralizadoServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceUploadBookCentralizadoServer) SendAndClose(m *UploadBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceUploadBookCentralizadoServer) Recv() (*UploadBookRequest, error) {
	m := new(UploadBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_UploadBookDistribuido_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).UploadBookDistribuido(&dataNodeServiceUploadBookDistribuidoServer{stream})
}

type DataNodeService_UploadBookDistribuidoServer interface {
	SendAndClose(*UploadBookResponse) error
	Recv() (*UploadBookRequest, error)
	grpc.ServerStream
}

type dataNodeServiceUploadBookDistribuidoServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceUploadBookDistribuidoServer) SendAndClose(m *UploadBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceUploadBookDistribuidoServer) Recv() (*UploadBookRequest, error) {
	m := new(UploadBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_DistributeBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).DistributeBook(&dataNodeServiceDistributeBookServer{stream})
}

type DataNodeService_DistributeBookServer interface {
	SendAndClose(*UploadBookResponse) error
	Recv() (*UploadBookRequest, error)
	grpc.ServerStream
}

type dataNodeServiceDistributeBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDistributeBookServer) SendAndClose(m *UploadBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceDistributeBookServer) Recv() (*UploadBookRequest, error) {
	m := new(UploadBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_DownloadBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).DownloadBook(&dataNodeServiceDownloadBookServer{stream})
}

type DataNodeService_DownloadBookServer interface {
	Send(*PartChunk) error
	Recv() (*PartName, error)
	grpc.ServerStream
}

type dataNodeServiceDownloadBookServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceDownloadBookServer) Send(m *PartChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceDownloadBookServer) Recv() (*PartName, error) {
	m := new(PartName)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_SendPropuestaDistribuida_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).SendPropuestaDistribuida(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNodeService/SendPropuestaDistribuida",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).SendPropuestaDistribuida(ctx, req.(*Propuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_RequestCompetencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ricart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).RequestCompetencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNodeService/RequestCompetencia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).RequestCompetencia(ctx, req.(*Ricart))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_ListaVacia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).ListaVacia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNodeService/ListaVacia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).ListaVacia(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPropuestaDistribuida",
			Handler:    _DataNodeService_SendPropuestaDistribuida_Handler,
		},
		{
			MethodName: "RequestCompetencia",
			Handler:    _DataNodeService_RequestCompetencia_Handler,
		},
		{
			MethodName: "ListaVacia",
			Handler:    _DataNodeService_ListaVacia_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBookCentralizado",
			Handler:       _DataNodeService_UploadBookCentralizado_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadBookDistribuido",
			Handler:       _DataNodeService_UploadBookDistribuido_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DistributeBook",
			Handler:       _DataNodeService_DistributeBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadBook",
			Handler:       _DataNodeService_DownloadBook_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bibliotecadn/DataNodeServer.proto",
}
