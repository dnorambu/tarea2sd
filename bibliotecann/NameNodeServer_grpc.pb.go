// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bibliotecann

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NameNodeServiceClient is the client API for NameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeServiceClient interface {
	SendPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Propuesta, error)
	SendLogchunks(ctx context.Context, opts ...grpc.CallOption) (NameNodeService_SendLogchunksClient, error)
}

type nameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeServiceClient(cc grpc.ClientConnInterface) NameNodeServiceClient {
	return &nameNodeServiceClient{cc}
}

func (c *nameNodeServiceClient) SendPropuesta(ctx context.Context, in *Propuesta, opts ...grpc.CallOption) (*Propuesta, error) {
	out := new(Propuesta)
	err := c.cc.Invoke(ctx, "/NameNodeService/SendPropuesta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) SendLogchunks(ctx context.Context, opts ...grpc.CallOption) (NameNodeService_SendLogchunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NameNodeService_serviceDesc.Streams[0], "/NameNodeService/SendLogchunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameNodeServiceSendLogchunksClient{stream}
	return x, nil
}

type NameNodeService_SendLogchunksClient interface {
	Send(*Logchunk) error
	CloseAndRecv() (*Confirmacion, error)
	grpc.ClientStream
}

type nameNodeServiceSendLogchunksClient struct {
	grpc.ClientStream
}

func (x *nameNodeServiceSendLogchunksClient) Send(m *Logchunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nameNodeServiceSendLogchunksClient) CloseAndRecv() (*Confirmacion, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Confirmacion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameNodeServiceServer is the server API for NameNodeService service.
// All implementations must embed UnimplementedNameNodeServiceServer
// for forward compatibility
type NameNodeServiceServer interface {
	SendPropuesta(context.Context, *Propuesta) (*Propuesta, error)
	SendLogchunks(NameNodeService_SendLogchunksServer) error
	mustEmbedUnimplementedNameNodeServiceServer()
}

// UnimplementedNameNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServiceServer struct {
}

func (UnimplementedNameNodeServiceServer) SendPropuesta(context.Context, *Propuesta) (*Propuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPropuesta not implemented")
}
func (UnimplementedNameNodeServiceServer) SendLogchunks(NameNodeService_SendLogchunksServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLogchunks not implemented")
}
func (UnimplementedNameNodeServiceServer) mustEmbedUnimplementedNameNodeServiceServer() {}

// UnsafeNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServiceServer will
// result in compilation errors.
type UnsafeNameNodeServiceServer interface {
	mustEmbedUnimplementedNameNodeServiceServer()
}

func RegisterNameNodeServiceServer(s *grpc.Server, srv NameNodeServiceServer) {
	s.RegisterService(&_NameNodeService_serviceDesc, srv)
}

func _NameNodeService_SendPropuesta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propuesta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).SendPropuesta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameNodeService/SendPropuesta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).SendPropuesta(ctx, req.(*Propuesta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_SendLogchunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NameNodeServiceServer).SendLogchunks(&nameNodeServiceSendLogchunksServer{stream})
}

type NameNodeService_SendLogchunksServer interface {
	SendAndClose(*Confirmacion) error
	Recv() (*Logchunk, error)
	grpc.ServerStream
}

type nameNodeServiceSendLogchunksServer struct {
	grpc.ServerStream
}

func (x *nameNodeServiceSendLogchunksServer) SendAndClose(m *Confirmacion) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nameNodeServiceSendLogchunksServer) Recv() (*Logchunk, error) {
	m := new(Logchunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NameNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NameNodeService",
	HandlerType: (*NameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPropuesta",
			Handler:    _NameNodeService_SendPropuesta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLogchunks",
			Handler:       _NameNodeService_SendLogchunks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bibliotecann/NameNodeServer.proto",
}
